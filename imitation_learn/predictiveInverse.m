% Learning of the inverse and then the predictive inverse model for song generation. 
% Based on discussions with Richard and Surya, Jan 14, 2011. Bugs etc attributed to Walter.
% Shared with Andre Gruning, 2015/10/19.
% - updating comments

clear all
nm=200; % number of motor neurons?
nsong=nm; %20; % dimension of song 
na=nm; %50; % number of auditory neurons
nam=nm; %50; % number of auditory memory neurons which memorize the tutor song
T=100; % duration of subsongs and of tutor song  [ms?]
tau=10; % 10 Delay of auditory activity with respect to the
% generating motor activity (syrinx + auditory pathway) [ms?]
oneStep=1; % Propagation delay of one neuronal connection [ms?]
nlearn_inv=300; % learning steps for inverse model
nlearn_pred=100; % learning steps for predicitve inverse model
eta_inv=0.002; % learning rate for inverse model
eta_pred=0.001; % learning rate for predictive inverse model
epsi=0; % Parameter to regularize the matrices

S=(randn(nsong,nm)+epsi*eye(nm))/sqrt(nm); % syrinx; converts the motor activity signal m into a song, just matrix
A=(randn(na,nsong)+epsi*eye(nm))/sqrt(na); % auditory pathway; converts the song into an auditory signal a, just a matrix
mtut=randn(nm,T); % motor activity to generate tutor song, ie each time step is vector of nm-activities.
song_tut=delayperm(S*mtut,tau-oneStep); % representation of tutor song in auditory area
atut=delayperm(A*song_tut,oneStep);  % auditory signal generated by the tutor song, or by rehearsing of the memory 
amtut=A*song_tut;  % memorized tutor song, one time step ahead of the rehearsed auditory activity; if memory perfect, also generated by playback
Q=A*S; % Total motor to auditory transformation, atut=delayperm(Q*mtut,tau)

%%%% 1. Step
%%%% learning the inverse model from listening to the subsong and
%%%% trying to reproduce the motor pattern it generated (phase 1)  
winv=randn(nm,na)/sqrt(na); % initial weight matrix converting the
% auditory activity a into a motor
% activity mS (invers model) (ie looking
% for sth like an inverse of Q.
e_inv=zeros(1,nlearn_inv); % Initialize error value for each learning step
for i=1:nlearn_inv
  m=randn(nm,T); % random motor activity to produce the subsong
  a=delayperm(Q*m,tau); % auditory activity produced by the subsong 
  minv=delayperm(winv*a,oneStep); % motor activity predicted from the auditory activity
  dm=(delayperm(m,tau+oneStep)-minv); % estimation error; postsynaptic eligibility trace of length tau+oneStep
  dwinv=dm*delayperm(a,oneStep)'; % learning rule for inverse weights
  winv=winv+eta_inv*dwinv; % update inverse weights
  e_inv(i)=sum(sum(dm.*dm))/(T*nm); % Mean squared error in motor
% estimation per time step and
% motor neuron 
end
figure(1);clf;plot(e_inv); xlabel('Learning steps'); ylabel('Inverse error');

%%%% 2. Step
%%%% learning the predictive inverse model during sleep from internally rehearsing the tutor song (phase 2)
wpred=randn(nm,nam)/sqrt(nam); % initial weight matrix converting the auditory activity a into a motor activity mS (inverse model)
e_pred=zeros(1,nlearn_pred); % Initialize error value for each learning step
minv=delayperm(winv*atut,oneStep); % motor activity produced by the
				   % inverse connections from the
				   % rehearsed memory through  
amtut_del=delayperm(amtut,tau+2*oneStep); % eligibility trace of
					% length tau+oneStep for
					% synapses from the memory to
					% the motor area 
for i=1:nlearn_pred
  mpred=wpred*amtut_del; % delayed silent input from the auditory memory 
  dm=(minv-mpred); % estimation error; presynaptic eligibility trace of length tau
  dwpred=dm*amtut_del'; % learning rule for inverse weights
  wpred=wpred+eta_pred*dwpred; % update inverse weights
  e_pred(i)=sum(sum(dm.*dm))/(T*nm); % Mean squared error in motor estimation per time step and motor neuron
end
figure(2);clf;plot(e_pred); xlabel('learning steps'); ylabel('predictive error');

%%%% 3. Step
%%%% Adult song production
atinv=delayperm(Q*winv*atut,0); % Auditory activity generated by the inverse model, but not delay by the song production + audit. pathway
amtpred=delayperm(Q*wpred*amtut,tau); % Auditory activity in the memory area generated by the predictive inverse model

%%%% Comparison between memorized and generated auditory activity
i=ceil(rand*na); % Select an auditory neuron
figure(3);clf;plot([atut(i,:);atinv(i,:)]')
xlabel('time steps'); title('Activity of one auditory neuron generated by the inverse model');
%[r,p]=corrcoef(atut(:),atinv(:));
r = corr(atut(:),atinv(:));
fprintf('Corr. coeff. inv. model: %.4f\n',r);

figure(4);clf;plot([amtut(i,:);amtpred(i,:)]')
xlabel('time steps'); title('Activity of one memory neuron generated by the predictive inverse model');
%[r,p]=corrcoef(amtut(:),amtpred(:));
r=corrcoef(amtut(:),amtpred(:));
fprintf('Corr. coeff. predictive inv. model: %.4f\n',r);

%%%%%  Playback test
%mplayback=wpred*delayperm(A*song_tut,oneStep); % Takes auditory response in memory area during playback, and produces the motor sequence out of that
%msong=wpred*delayperm(amtut,oneStep); % The song generated motor sequence is trivially the same here because we assumed perfect memory, i.e. amtut=A*song
%figure(5);clf;plot([mplayback(i,:); mplayback(i,:)]')
%xlabel('time steps'); title('Mirroring is trivial because M has same drive during singing and playback');


